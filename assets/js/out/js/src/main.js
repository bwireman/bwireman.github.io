(() => { var H = (t, e, r) => { if (!e.has(t)) throw TypeError("Cannot " + r) }; var A = (t, e, r) => (H(t, e, "read from private field"), r ? r.call(t) : e.get(t)), j = (t, e, r) => { if (e.has(t)) throw TypeError("Cannot add the same private member more than once"); e instanceof WeakSet ? e.add(t) : e.set(t, r) }; var b = class { static fromArray(e, r) { let n = r || new z; return e.reduceRight((s, l) => new T(l, s), n) } static isList(e) { let r = e?.__gleam_prelude_variant__; return r === "EmptyList" || r === "NonEmptyList" } [Symbol.iterator]() { return new S(this) } inspect() { return `[${this.toArray().map(d).join(", ")}]` } toArray() { return [...this] } atLeastLength(e) { for (let r of this) { if (e <= 0) return !0; e-- } return e <= 0 } hasLength(e) { for (let r of this) { if (e <= 0) return !1; e-- } return e === 0 } countLength() { let e = 0; for (let r of this) e++; return e } }; var S = class { #e; constructor(e) { this.#e = e } next() { if (this.#e.isEmpty()) return { done: !0 }; { let { head: e, tail: r } = this.#e; return this.#e = r, { value: e, done: !1 } } } }, z = class extends b { get __gleam_prelude_variant__() { return "EmptyList" } isEmpty() { return !0 } }, T = class extends b { constructor(e, r) { super(); this.head = e, this.tail = r } get __gleam_prelude_variant__() { return "NonEmptyList" } isEmpty() { return !1 } }; function d(t) { let e = typeof t; if (t === !0) return "True"; if (t === !1) return "False"; if (t === null) return "//js(null)"; if (t === void 0) return "Nil"; if (e === "string") return JSON.stringify(t); if (e === "bigint" || e === "number") return t.toString(); if (Array.isArray(t)) return `#(${t.map(d).join(", ")})`; if (t instanceof Set) return `//js(Set(${[...t].map(d).join(", ")}))`; if (t instanceof RegExp) return `//js(${t})`; if (t instanceof Date) return `//js(Date("${t.toISOString()}"))`; if (t instanceof Function) { let r = []; for (let n of Array(t.length).keys()) r.push(String.fromCharCode(n + 97)); return `//fn(${r.join(", ")}) { ... }` } try { return t.inspect() } catch { return J(t) } } function J(t) { let [e, r] = G(t), n = t.constructor.name, s = []; for (let m of e(t)) s.push(`${d(m)}: ${d(r(t, m))}`); let l = s.length ? " " + s.join(", ") + " " : ""; return `//js(${n === "Object" ? "" : n + " "}{${l}})` } function G(t) { if (t instanceof Map) return [e => e.keys(), (e, r) => e.get(r)]; { let e = t instanceof globalThis.Error ? ["message"] : []; return [r => [...e, ...Object.keys(r)], (r, n) => r[n]] } } function v(t) { return t.length } var c = class { constructor(e) { this.promise = e } static wrap(e) { return e instanceof Promise ? new c(e) : e } static unwrap(e) { return e instanceof c ? e.promise : e } }; function f(t, e) { return t.then(r => c.wrap(e(c.unwrap(r)))) } function N(t, e) { return t.catch(r => e(r)) } var o = class { inspect() { let e = n => { let s = a(this[n]); return isNaN(parseInt(n)) ? `${n}: ${s}` : s }, r = Object.keys(this).map(e).join(", "); return r ? `${this.constructor.name}(${r})` : this.constructor.name } withFields(e) { let r = Object.keys(this).map(n => n in e ? e[n] : this[n]); return new this.constructor(...r) } }, g = class { static fromArray(e, r) { let n = r || new q; return e.reduceRight((s, l) => new I(l, s), n) } static isList(e) { let r = e?.__gleam_prelude_variant__; return r === "EmptyList" || r === "NonEmptyList" } [Symbol.iterator]() { return new M(this) } inspect() { return `[${this.toArray().map(a).join(", ")}]` } toArray() { return [...this] } atLeastLength(e) { for (let r of this) { if (e <= 0) return !0; e-- } return e <= 0 } hasLength(e) { for (let r of this) { if (e <= 0) return !1; e-- } return e === 0 } countLength() { let e = 0; for (let r of this) e++; return e } }; var M = class { #e; constructor(e) { this.#e = e } next() { if (this.#e.isEmpty()) return { done: !0 }; { let { head: e, tail: r } = this.#e; return this.#e = r, { value: e, done: !1 } } } }, q = class extends g { get __gleam_prelude_variant__() { return "EmptyList" } isEmpty() { return !0 } }, I = class extends g { constructor(e, r) { super(); this.head = e, this.tail = r } get __gleam_prelude_variant__() { return "NonEmptyList" } isEmpty() { return !1 } }; var w = class extends o { static isResult(e) { let r = e?.__gleam_prelude_variant__; return r === "Ok" || r === "Error" } }, u = class extends w { constructor(e) { super(); this[0] = e } get __gleam_prelude_variant__() { return "Ok" } isOk() { return !0 } }, i = class extends w { constructor(e) { super(); this[0] = e } get __gleam_prelude_variant__() { return "Error" } isOk() { return !1 } }; function a(t) { let e = typeof t; if (t === !0) return "True"; if (t === !1) return "False"; if (t === null) return "//js(null)"; if (t === void 0) return "Nil"; if (e === "string") return JSON.stringify(t); if (e === "bigint" || e === "number") return t.toString(); if (Array.isArray(t)) return `#(${t.map(a).join(", ")})`; if (t instanceof Set) return `//js(Set(${[...t].map(a).join(", ")}))`; if (t instanceof RegExp) return `//js(${t})`; if (t instanceof Date) return `//js(Date("${t.toISOString()}"))`; if (t instanceof Function) { let r = []; for (let n of Array(t.length).keys()) r.push(String.fromCharCode(n + 97)); return `//fn(${r.join(", ")}) { ... }` } try { return t.inspect() } catch { return Z(t) } } function Z(t) { let [e, r] = K(t), n = t.constructor.name, s = []; for (let m of e(t)) s.push(`${a(m)}: ${a(r(t, m))}`); let l = s.length ? " " + s.join(", ") + " " : ""; return `//js(${n === "Object" ? "" : n + " "}{${l}})` } function K(t) { if (t instanceof Map) return [e => e.keys(), (e, r) => e.get(r)]; { let e = t instanceof globalThis.Error ? ["message"] : []; return [r => [...e, ...Object.keys(r)], (r, n) => r[n]] } } var ie = new WeakMap, le = void 0; var k, _ = class { static hash(e) { let r = A(this, k).get(e); if (r) return r; if (e instanceof Object) { let n = JSON.stringify(e); return ie.set(e, n), n } else return e.toString() } constructor() { this.entries = new globalThis.Map } get size() { return this.entries.size } inspect() { return `map.from_list([${[...this.entries.values()].map(r => a(r)).join(", ")}])` } copy() { let e = new _; return e.entries = new globalThis.Map(this.entries), e } toList() { return g.fromArray([...this.entries.values()]) } insert(e, r) { let n = this.copy(); return n.entries.set(_.hash(e), [e, r]), n } delete(e) { let r = this.copy(); return r.entries.delete(_.hash(e)), r } get(e) { let r = _.hash(e); return this.entries.has(r) ? new u(this.entries.get(r)[1]) : new i(le) } }, U = _; k = new WeakMap, j(U, k, new WeakMap); var O = (t, e) => { let r = ""; e > 0 && (r = `<i id="${t}-icon" class="far fa-star"> ${e}</i>`); let n = document.getElementById(t); n.classList = "", n.innerHTML = r }, P = (t, e) => fetch(`https://api.github.com/repos/${t}/${e}/stargazers`).then(r => r.json()); function E(t, e, r) { let n = P(t, e), s = f(n, v); return N(s, l => r) } function he() { let t = E("bwireman", "gleam_pb", 12); f(t, n => O("gleam-pb-stars", n)); let e = E("bwireman", "censys_ex", 4); f(e, n => O("censys-ex-stars", n)); let r = E("bwireman", "esgleam", 0); return f(r, n => O("esgleam-stars", n)) } he(); })();
